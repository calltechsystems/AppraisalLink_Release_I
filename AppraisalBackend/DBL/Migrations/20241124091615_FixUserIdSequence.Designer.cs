// <auto-generated />
using System;
using DBL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DBL.Migrations
{
    [DbContext(typeof(AppraisallandContext))]
    [Migration("20241124091615_FixUserIdSequence")]
    partial class FixUserIdSequence
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBL.Models.AdminArchiveProperty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.HasKey("Id")
                        .HasName("admin_archive_property_pkey");

                    b.ToTable("admin_archive_property", (string)null);
                });

            modelBuilder.Entity("DBL.Models.AdminArchiveUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("admin_archive_users_pkey");

                    b.ToTable("admin_archive_users", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Paypalagreementid")
                        .HasColumnType("text")
                        .HasColumnName("paypalagreementid");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdate");

                    b.Property<int?>("Subscriptionid")
                        .HasColumnType("integer")
                        .HasColumnName("subscriptionid");

                    b.HasKey("Id")
                        .HasName("agreement_pkey");

                    b.ToTable("agreement", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Appraiser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ApartmentNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("apartment_no");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("area");

                    b.Property<string>("CellNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<decimal?>("CommissionRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("commission_rate");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_Id");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_name");

                    b.Property<string>("Designation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("designation");

                    b.Property<string>("EmailId")
                        .HasColumnType("character varying")
                        .HasColumnName("Email_Id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("LenderListUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Lender_list_Url");

                    b.Property<int?>("MaxNumberOfAssignedOrders")
                        .HasColumnType("integer")
                        .HasColumnName("max_number_of_assigned_orders");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street_name");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street_number");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("appraisers_pkey");

                    b.ToTable("appraisers", (string)null);
                });

            modelBuilder.Entity("DBL.Models.AppraiserCompany", b =>
                {
                    b.Property<long>("AppraiserCompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("appraiser_company_id");

                    b.Property<string>("AddressLineOne")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line_one");

                    b.Property<string>("AddressLineTwo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line_two");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("apartment_Number");

                    b.Property<string>("AppraiserCompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("appraiser_company_name");

                    b.Property<string>("CellNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("EmailId")
                        .HasColumnType("character varying")
                        .HasColumnName("Email_Id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("LenderListUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Lender_list_Url");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("license_number");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfficeContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_contact_email");

                    b.Property<string>("OfficeContactFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("office_contact_first_name");

                    b.Property<string>("OfficeContactLastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("office_contact_last_name");

                    b.Property<string>("OfficeContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("office_contact_phone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("StreetName")
                        .HasColumnType("character varying")
                        .HasColumnName("street_Name ");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("street_Number");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("AppraiserCompanyId")
                        .HasName("appraiser_company_pkey");

                    b.ToTable("appraiser_company", (string)null);
                });

            modelBuilder.Entity("DBL.Models.ArchivedAppraiser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("Orderid")
                        .HasColumnType("bigint");

                    b.Property<long?>("Userid")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("archived_appraiser_pkey");

                    b.ToTable("archived_appraiser", (string)null);
                });

            modelBuilder.Entity("DBL.Models.ArchivedProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("Order_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("archived_properties_pkey");

                    b.ToTable("archived_properties", (string)null);
                });

            modelBuilder.Entity("DBL.Models.AssignProperty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("Appraiserid")
                        .HasColumnType("integer")
                        .HasColumnName("appraiserid");

                    b.Property<int>("Companyid")
                        .HasColumnType("integer")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_DateTime");

                    b.Property<int>("Propertyid")
                        .HasColumnType("integer")
                        .HasColumnName("propertyid");

                    b.HasKey("Id")
                        .HasName("assign_properties_pkey");

                    b.HasIndex("Propertyid");

                    b.ToTable("assign_properties", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Bid", b =>
                {
                    b.Property<long>("BidId")
                        .HasColumnType("bigint")
                        .HasColumnName("bid_id");

                    b.Property<bool?>("AppraiserAssign")
                        .HasColumnType("boolean");

                    b.Property<string>("AppraiserName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("appraiser_name");

                    b.Property<long?>("AppraiserUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("appraiser_user_id");

                    b.Property<long?>("AssignedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("assignedby");

                    b.Property<double?>("BidAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("bid_amount");

                    b.Property<int?>("BidLowerRange")
                        .HasColumnType("integer")
                        .HasColumnName("bid_lower_range");

                    b.Property<int?>("BidUpperRange")
                        .HasColumnType("integer")
                        .HasColumnName("bid_upper_range");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("LenderListUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("lender_list_url");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("integer")
                        .HasColumnName("orderstatus");

                    b.Property<string>("Remark")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("remark");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("request_time");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("response_time");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StatusDate")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("statusdate");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("BidId")
                        .HasName("bid_pkey");

                    b.ToTable("bid", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Broker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ApartmentNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("apartment_no");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("area");

                    b.Property<string>("AssistantEmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assistant_email_address");

                    b.Property<string>("AssistantFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_first_name");

                    b.Property<string>("AssistantLastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_last_name");

                    b.Property<string>("AssistantPhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("assistant_phone_number");

                    b.Property<string>("AssistantTwoEmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assistant_two_email_address");

                    b.Property<string>("AssistantTwoFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_two_first_name");

                    b.Property<string>("AssistantTwoLastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_two_last_name");

                    b.Property<string>("AssistantTwoPhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("assistant_two_phone_number");

                    b.Property<long?>("BrokerageId")
                        .HasColumnType("bigint")
                        .HasColumnName("brokerageid");

                    b.Property<string>("BrokerageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brokerage_name");

                    b.Property<string>("CellNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("cellnumber");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_name");

                    b.Property<DateOnly?>("DateEstablished")
                        .HasColumnType("date")
                        .HasColumnName("date_established");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailId")
                        .HasColumnType("character varying")
                        .HasColumnName("email_id");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("fax_number");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsActive1")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("license_no");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MortageBrokerLicNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mortage_broker_lic_no");

                    b.Property<string>("MortageBrokerageLicNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mortage_brokerage_lic_no");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street_name");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street_number");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("brokers_pkey");

                    b.ToTable("brokers", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Brokerage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ApartmentNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("apartment_no");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("area");

                    b.Property<string>("AssistantEmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assistant_email_address");

                    b.Property<string>("AssistantFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_first_name");

                    b.Property<string>("AssistantLastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_last_name");

                    b.Property<string>("AssistantPhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("assistant_phone_number");

                    b.Property<string>("AssistantTwoEmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assistant_two_email_address");

                    b.Property<string>("AssistantTwoFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_two_first_name");

                    b.Property<string>("AssistantTwoLastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assistant_two_last_name");

                    b.Property<string>("AssistantTwoPhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("assistant_two_phone_number");

                    b.Property<string>("BrokerageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brokerage_name");

                    b.Property<string>("CellNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("cellnumber");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_name");

                    b.Property<DateOnly?>("DateEstablished")
                        .HasColumnType("date")
                        .HasColumnName("date_established");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailId")
                        .HasColumnType("character varying")
                        .HasColumnName("email_id");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("fax_number");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("license_no");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MortageBrokerLicNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mortage_broker_lic_no");

                    b.Property<string>("MortageBrokerageLicNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mortage_brokerage_lic_no");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street_name");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street_number");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("brokerage_pkey");

                    b.ToTable("brokerage", (string)null);
                });

            modelBuilder.Entity("DBL.Models.ContactUs", b =>
                {
                    b.Property<int>("ContactusId")
                        .HasColumnType("integer")
                        .HasColumnName("contactus_id");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<bool>("UserLoggedIn")
                        .HasColumnType("boolean")
                        .HasColumnName("user_logged_in");

                    b.HasKey("ContactusId")
                        .HasName("contactus_pkey");

                    b.ToTable("contactus", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("notification_id");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_seen");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("message");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.HasKey("NotificationId")
                        .HasName("notifications_pkey");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("DBL.Models.PaymentToken", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("Currentdatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("currentdatetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Planid")
                        .HasColumnType("integer")
                        .HasColumnName("planid");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<int?>("TopUpId")
                        .HasColumnType("integer")
                        .HasColumnName("topUpId");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("payment_tokens_pkey");

                    b.ToTable("payment_tokens", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Plan", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("Currencycode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("currencycode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<double?>("MonthlyAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("monthly_amount");

                    b.Property<int>("NoOfProperties")
                        .HasColumnType("integer")
                        .HasColumnName("no_of_properties");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("plan_name")
                        .IsFixedLength();

                    b.Property<string>("Returnurl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("returnurl");

                    b.Property<short>("UserType")
                        .HasColumnType("smallint")
                        .HasColumnName("user_type");

                    b.Property<double?>("YearlyAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("yearly_amount");

                    b.HasKey("Id")
                        .HasName("plans_pkey");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Product", b =>
                {
                    b.Property<int>("Productid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Productid"));

                    b.Property<string>("Productdescription")
                        .HasColumnType("text");

                    b.Property<string>("Productname")
                        .HasColumnType("text");

                    b.HasKey("Productid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DBL.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("integer")
                        .HasColumnName("property_id");

                    b.Property<DateTime?>("AddedDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("added_datetime");

                    b.Property<string>("ApplicantAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("applicant_address");

                    b.Property<string>("ApplicantEmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("applicant_email_address");

                    b.Property<string>("ApplicantFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("applicant_first_name");

                    b.Property<string>("ApplicantLastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("applicant_last_name");

                    b.Property<string>("ApplicantPhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("applicant_phone_number");

                    b.Property<string>("Area")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("area");

                    b.Property<string>("Attachment")
                        .HasColumnType("character varying")
                        .HasColumnName("attachment");

                    b.Property<int?>("BidLowerRange")
                        .HasColumnType("integer")
                        .HasColumnName("bid_lower_range");

                    b.Property<int?>("BidUpperRange")
                        .HasColumnType("integer")
                        .HasColumnName("bid_upper_range");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Community")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("community");

                    b.Property<double?>("EstimatedValue")
                        .HasColumnType("double precision")
                        .HasColumnName("estimated_value");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<bool?>("IsArchiveAppraiser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archiveappraiser");

                    b.Property<int?>("IsCompleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_completed");

                    b.Property<bool?>("IsOnCancel")
                        .HasColumnType("boolean")
                        .HasColumnName("isoncancel");

                    b.Property<bool?>("IsOnHold")
                        .HasColumnType("boolean")
                        .HasColumnName("isonhold");

                    b.Property<string>("LenderInformation")
                        .HasColumnType("character varying")
                        .HasColumnName("lender_information");

                    b.Property<DateTime?>("ModifiedDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("integer")
                        .HasColumnName("orderstatus");

                    b.Property<bool?>("PropertyStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("property_status");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("province");

                    b.Property<string>("Purpose")
                        .HasColumnType("character varying")
                        .HasColumnName("purpose");

                    b.Property<string>("QuoteRequiredDate")
                        .HasColumnType("character varying")
                        .HasColumnName("quote_required_date");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying")
                        .HasColumnName("remark");

                    b.Property<int?>("Sqft")
                        .HasColumnType("integer")
                        .HasColumnName("sqft");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street_name");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street_number");

                    b.Property<string>("TypeOfAppraisal")
                        .HasColumnType("character varying")
                        .HasColumnName("type_of_appraisal");

                    b.Property<string>("TypeOfBuilding")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type_of_building");

                    b.Property<short?>("Urgency")
                        .HasColumnType("smallint")
                        .HasColumnName("urgency");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("PropertyId")
                        .HasName("properties_pkey");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("DBL.Models.RecurringProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("recurring_product_pkey");

                    b.ToTable("recurring_product", (string)null);
                });

            modelBuilder.Entity("DBL.Models.RecurringSubscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("TopUpId")
                        .HasColumnType("integer")
                        .HasColumnName("topUp_id");

                    b.Property<int?>("TotalProperties")
                        .HasColumnType("integer")
                        .HasColumnName("total_properties");

                    b.Property<int?>("UsedProperties")
                        .HasColumnType("integer")
                        .HasColumnName("used_properties");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("SubscriptionId")
                        .HasName("recurring_subscriptions_pkey");

                    b.ToTable("recurring_subscriptions", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Subscription", b =>
                {
                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<short>("PlanId")
                        .HasColumnType("smallint")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int?>("TopUpId")
                        .HasColumnType("integer")
                        .HasColumnName("topUp_id");

                    b.Property<short>("TotalProperties")
                        .HasColumnType("smallint")
                        .HasColumnName("total_properties");

                    b.Property<short?>("UsedProperties")
                        .HasColumnType("smallint")
                        .HasColumnName("used_properties");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("SubscriptionId")
                        .HasName("subscriptions_pkey");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Subscriptionplan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("Cancelurl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cancelurl");

                    b.Property<int?>("Cycles")
                        .HasColumnType("integer")
                        .HasColumnName("cycles");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Frequency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("frequency");

                    b.Property<int?>("Frequencyinterval")
                        .HasColumnType("integer")
                        .HasColumnName("frequencyinterval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Returnurl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("returnurl");

                    b.Property<decimal?>("Setupfee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("setupfee");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("subscriptionplans_pkey");

                    b.ToTable("subscriptionplans", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Topup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Currencycode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("NoOfProperties")
                        .HasColumnType("integer")
                        .HasColumnName("no_of_properties");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text")
                        .HasColumnName("returnUrl");

                    b.Property<string>("TopupDescription")
                        .HasColumnType("text")
                        .HasColumnName("topup_description");

                    b.Property<string>("Topupname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("topupname");

                    b.Property<decimal?>("TupUpAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tup_up_amount");

                    b.Property<short?>("UserType")
                        .HasColumnType("smallint")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("topup_pkey");

                    b.ToTable("topup", (string)null);
                });

            modelBuilder.Entity("DBL.Models.TransactionLog", b =>
                {
                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Active");

                    b.Property<short?>("NoOfProperties")
                        .HasColumnType("smallint")
                        .HasColumnName("no_of_properties");

                    b.Property<string>("Paymentid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("paymentid");

                    b.Property<double?>("PlanAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("plan_amount");

                    b.Property<string>("PlanName")
                        .HasColumnType("character varying")
                        .HasColumnName("plan_name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<short?>("TotalProperties")
                        .HasColumnType("smallint")
                        .HasColumnName("total_properties");

                    b.Property<string>("TransactionDetail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_detail");

                    b.Property<short?>("UsedProperties")
                        .HasColumnType("smallint")
                        .HasColumnName("used_properties");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("transaction_logs_pkey");

                    b.ToTable("transaction_logs", (string)null);
                });

            modelBuilder.Entity("DBL.Models.UserInformation", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnType("text")
                        .HasColumnName("forgot_password_token");

                    b.Property<int?>("GetEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("get_email")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("GetSms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("get_sms")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("isAdmin");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<DateTime?>("Resettokenexpiry")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("resettokenexpiry");

                    b.Property<short>("UserType")
                        .HasColumnType("smallint")
                        .HasColumnName("user_type");

                    b.Property<string>("VerifyEmailToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verify_email_token");

                    b.HasKey("UserId")
                        .HasName("user_information_pkey");

                    b.ToTable("user_information", (string)null);
                });

            modelBuilder.Entity("DBL.Models.Wishlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AddedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("added_dateTime");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("wishlist_pkey");

                    b.ToTable("wishlist", (string)null);
                });

            modelBuilder.Entity("DBL.Models.AssignProperty", b =>
                {
                    b.HasOne("DBL.Models.Property", "propertyDetails")
                        .WithMany()
                        .HasForeignKey("Propertyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("propertyDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
